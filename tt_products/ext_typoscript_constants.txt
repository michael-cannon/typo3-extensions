plugin.tt_products {
    # cat=plugin.products/file; type=file[html,htm,tmpl,txt]; label= Template File: This is a simple textfile where each part of the shopping basket is defined with HTML-code. To see an example with explanations, take a look at EXT:tt_products/pi/products_template.tmpl which is the default.
  file.templateFile = EXT:tt_products/template/products_template.tmpl
    # cat=plugin.products/file; type=file[IMAGE_EXT]; label= Alternative Image: This image is used if there is no image present for the product
  file.noImageAvailable =

    # cat=plugin.products/typo; type=wrap; label= Wrap 1: This wrap is used in the template-file.
  wrap1 = <font face="verdana" size=2 color=black> | </font>
    # cat=plugin.products/typo; type=wrap; label= Wrap 2: This wrap is used in the template-file.
  wrap2 = <font face="verdana" size=1 color=black> | </font>

    # cat=plugin.products/color; type=color; label= Color 1: This bgcolor is used in the template-file.
  color1 = #cccccc
    # cat=plugin.products/color; type=color; label= Color 2: This bgcolor is used in the template-file.
  color2 = #999999
    # cat=plugin.products/color; type=color; label= Color 3: This bgcolor is used in the template-file.
  color3 = #333333

    # cat=plugin.products//; type=boolean; label= Click Enlarge, Single display: If this option is set, users can click the image of a product and it'll pop-up in a separate window at a larger size.
  clickEnlarge = 1
    # cat=plugin.products//; type=boolean; label= Click Enlarge, List display: As above, but for the images in the product-lists and search-results
  clickEnlarge_list = 1
    # cat=plugin.products//; type=boolean; label= Click Enlarge, Basket display: As above, but for the images in the basket
  clickEnlarge_basket = 1

    # cat=plugin.products//; type=boolean; label= Color selectable, List display: Make the color selectable in the list
  selectColor = 1
    # cat=plugin.products//; type=boolean; label= Size selectable, List display: Make the size selectable in the list
  selectSize = 1
    # cat=plugin.products//; type=boolean; label= Gradings selectable, List display: Make the gradings selectable in the list
  selectGradings = 1
    # cat=plugin.products//; type=boolean; label= Accessory selectable, List display: If true the accessory of a product is selectable in a check box.
  selectAccessory = 0
    # cat=plugin.products//; type=string; label= Accessory text, List display: Text for accessory in ###PRICE_ACCESSORY_TEXT###
  accessoryText = 
  
    # cat=plugin.products//; type=boolean; label= Display Category Header in list: If this option is set, the category headers (page titles) will automatically be displayed in the product lists. This is not always convenient because you might have chosen a header-title for the "list" content element.
  displayListCatHeader = 1
    # cat=plugin.products//; type=boolean; label= Display Category Header in basket: If this option is set, the category headers (page titles) will automatically be displayed in the basket lists.
  displayBasketCatHeader = 0
    # cat=plugin.products//; type=int+; label= Number of columns, List display: Number of columns for the items in the list
  displayBasketColumns = 
    # cat=plugin.products//; type=boolean; label= cObj settings: If set, certain settings are manipulated in order to let the script render a single item - the $cObj->data.
  displayCurrentRecord = 
  
    # cat=plugin.products//; type=string; label= CSS even rows: Cascading Stylesheets (CSS) even rows in the products listing. This works only if displayBasketColumns has been set.
  CSSRowEven = 
    # cat=plugin.products//; type=string; label= CSS uneven rows: Cascading Stylesheets (CSS) uneven rows in the products listing. This works only if displayBasketColumns has been set.
  CSSRowUneven =
    # cat=plugin.products//; type=string; label= CSS default, List display: Cascading Stylesheets (CSS) for default entries in a list view.
  CSSListDefault =
    # cat=plugin.products//; type=string; label= CSS current, List display: Cascading Stylesheets (CSS) for the currently selected item a list view.
  CSSListCurrent =

    # cat=plugin.products//; type=boolean; label= single view, List display: Usually you get the link to the single item view on the display page of the LIST code. If you however want to create your own pages for single view with SINGLE code you must set this to 1.
  NoSingleViewOnList = 
  
  
    # cat=plugin.products//; type=int+; label= Max items displayed: The maximum number of items displayed on one page. 
  limit = 50
    # cat=plugin.products//; type=int+; label= Max images displayed: The maximum number of images displayed for an item. 
  limitImage = 1
    # cat=plugin.products//; type=boolean; label= Separate images: Normally all images are displayed together. With separateImage=on you can use a ###PRODUCT_IMAGE3### for each image number separatly.
  separateImage =

    # cat=plugin.products/dims; type=int+; label= Max image width, single display: The maximum width in pixels of an image when displayed with a single product.
  maxW_single = 200
    # cat=plugin.products/dims; type=int+; label= Max image width, list display: The maximum width in pixels of an image when displayed in lists and searchresults.
  maxW_list = 50
    # cat=plugin.products/dims; type=int+; label= Max image heitgh, list display: The maximum height in pixels of an image when displayed in lists and searchresults.
  maxH_list = 100
    # cat=plugin.products/dims; type=int+; label= Max image width, basket display: The maximum width in pixels of an image when displayed in the shopping-basket.
  maxW_basket = 100
    # cat=plugin.products/dims; type=int+; label= Max image height, basket display: The maximum height in pixels of an image when displayed in the shopping-basket.
  maxH_basket = 100


    # cat=plugin.products//; type=int+; label=PID for info page: This is the PID of the infoPage of the store.
  PIDinfo = 
    # cat=plugin.products//; type=int+; label=PID for finalize page
  PIDfinalize =
    # cat=plugin.products//; type=int+; label=PID for thanks page
  PIDthanks =
    # cat=plugin.products//; type=int+; label=PID for tracking page
  PIDtracking =
    # cat=plugin.products//; type=int+; label=PID for single item display: Set this in your setup for defining where conditions for several pages.
  PIDitemDisplay =
    # cat=plugin.products//; type=int+; label=PID for search page: If you want all product searches to go to a specific page, enter the PID it here! NOTE: If you set this PID, all searchqueries will (must) be handled with a list content element with the code "search" on that page.
  PIDsearch =
    # cat=plugin.products//; type=int+; label=PID for basket page: If you want every change in the number of items anywhere to go to a specific page (eg. the shopping basket page), enter the PID here.
  PIDbasket =
    # cat=plugin.products//; type=int+; label=PID for store root: This is the PID of the rootPage of the store. If not set the store will operate over all pages from the root of the site. But if the site has many pages, performance may improve
  PIDstoreRoot = 
    # cat=plugin.products//; type=int+; label=PID for the memo page: Needed if you want to use the memo page
  PIDmemo = 
    # cat=plugin.products//; type=int+; label=PID for the sys_products_orders records: By default they will get the pid of the payment (finalize) page.
  PID_sys_products_orders = 0
    # cat=plugin.products//; type=int+; label=PID for the tt_products_gifts records: By default they will get the pid of the payment (finalize) page.
  PIDGiftsTable = 0

    # cat=plugin.products//; type=string; label=When the payment shall be executed. Possible values:  'payment', 'finalize'
  paymentActivity=finalize

    # cat=plugin.products//; type=int+; label=advance order number with integer: If this value is set, then each time a new order is created the order-number counter will be incremented with a random number between [first-integer] and [second integer].
  advanceOrderNumberWithInteger = 

    # cat=plugin.products//; type=boolean; label=always advance order number: If set then the order number will always get increased and the empty order numbers are not reused. 
  alwaysAdvanceOrderNumber =
 
    # cat=plugin.products//; type=int+; label=default product ID: ID of the default product that will be shown in a single page when nothing else is configured
  defaultProductID = 1
    # cat=plugin.products//; type=int+; label=recursive levels: Number of recursive levels to select tt_products from in lists.
  recursive = 
    # cat=plugin.products//; type=string; label=Domain ot the shop; used to replace the ###DOMAIN### marker
  domain = nodomain.entered.yet
 
    # cat=plugin.products//; type=small; label=TAX percentage: Type= Double (means, "use . as decimal point")
  TAXpercentage = 25

    # TAX included in database prices?
  TAXincluded = 1
    # Price decimals
  priceDec = 2
    # cat=plugin.products//; type=small; label=Price decimal point
  priceDecPoint = .
    # cat=plugin.products//; type=small; label=Price Thousand point
  priceThousandPoint = 
    # cat=plugin.products//; type=string; label=Currency symbol. Used in shop administration.
  currencySymbol = EUR

    # cat=plugin.products//; type=boolean; label=lock login user: If set and a user is logged in, the address info of that fe_user is 'hardcoded' as billing address of the user.
  lockLoginUserInfo = 0
    # cat=plugin.products//; type=boolean; label=lock login user address: If lockLoginUserInfo is set, this switch makes that the address field is filled in from address, country, zip and city of the fe_user
  loginUserInfoAddress =
    # cat=plugin.products//; type=boolean; label=order by category title: If you want the list to be ordered by the title of the tt_products_cat. This overwrites any settings of orderBy.
  orderByCategoryTitle = 
    # cat=plugin.products//; type=boolean; label=oder by item number: If the single item display should be sorted by ItemNumber instead of uid; used for ###LINK_NEXT_SINGLE### and ###LINK_PREV_SINGLE### 
  orderByItemNumberSg = 
    # cat=plugin.products//; type=string; label=Prefix to the order numbers: Dont use spaces or special chars. Max 10 chars.
  orderNumberPrefix = order_
    # cat=plugin.products//; type=string; label=from email addresss: From email address for the confirmation email to customer
  orderEmail_from = shop@myTypo3Shop.com
    # cat=plugin.products//; type=string; label=from email name: From name for the confirmation email to customer. 
  orderEmail_fromName = My Typo3 Shop
    # cat=plugin.products//; type=string; label=to email addresses: Comma separated list of recipients of the order email. Shop and administrator/supervisor email addresses go here!
  orderEmail_to = shop@myTypo3Shop.com
    # cat=plugin.products//; type=boolean; label=HTML email: If set, the order confirmation email is sent as HTML
  orderEmail_htmlmail = 0
    # cat=plugin.products//; type=boolean; label=email notify: If email-notification for the customer is enabled by default (he can change it himself in the tracking module later)
  email_notify_default = 1
  
    # cat=plugin.products//; type=string; label=password: The 'password' used by the administrator of the shop to go into the tracking system in the front end.
  update_code = password
  
    # cat=plugin.products//; type=boolean; label=Use Price Tag: Print a graphical price tag instead of the normal text field
  usePriceTag = 0
    # cat=plugin.products//; type=boolean; label=Use Frontend User Static Info Country Field: This is the small country field of the fe_user table
  useStaticInfoCountry = 0
    # cat=plugin.products//; type=text; label=Message displayed at bulkily items
  bulkilyWarning = <p><b>Warning! This article needs special transport.</b></p>
    # cat=plugin.products//; type=int+; label=Additional cost for bulkily items
  bulkilyAddition = 25
    # cat=plugin.products//; type=int+; label=Tax fee in percent for shipping of bulkily
  bulkilyFeeTax = 
    # cat=plugin.products//; type=text; label=Special preparation: Message displayed at items marked as special preparation
  specialPreparation = Special preparation possible! <A HREF="?id=999&tt_products=###PRODUCT_ID###">Order here</A>.

    # cat=plugin.products//; type=int+; label=Max note length: Max. length of note text in list view
  max_note_length = 100

    # cat=plugin.products//; type=boolean; label=Create Users: Create an user account for each new customer
  createUsers = 0
    # cat=plugin.products//; type=int+; label=User Sysfolder PID: PID of the sysfolder for the new users
  PIDuserFolder = 116
    # cat=plugin.products//; type=int+; label=Group of customers
  memberOfGroup = 1

    # cat=plugin.products//; type=int+; label=PID of AGB page: PID of the page with the AGB
  PIDagb = 0
    # cat=plugin.products//; type=small; label=Target of AGB page: Target for the AGB page
  agbtarget = _blank

    # cat=plugin.products/file; type=file[html,htm,pdf,doc,txt]; label= AGB Attachment File: This file is attached to the order confirmation mail
  AGBattachment = fileadmin/agb.pdf

    # cat=plugin.products//; type=boolean; label=Order CSV generation: Generate a CSV file for each order
  generateCSV = 0
    # cat=plugin.products//; type=text; label=Order CSV folder: Destination directory for CSV files generated by orders; Important: Enter a directory, that is NOT accessible via web!
  CSVdestination = ../csvorders/
    # cat=plugin.products//; type=text; label=Order CSV export fields: Product database fields to export (Comma seperated)
  CSVfields = tstamp,title,price,price2,itemnumber,category,inStock,tax,weight,bulkily,offer,highlight,directcost,subtitle
    # cat=plugin.products//; type=boolean; label=Choose your CSV format: Write all additional information in one line behind the first ordered product. This is good if you want to import this files somewhere. If you not check this, the CSV is formatted for best view in Excel for example
  CSVinOneLine = 0

    # cat=plugin.products//; type=boolean; label=Always in Stock: The stock will never get reduced.
  AlwaysInStock = 1
    # cat=plugin.products//; type=boolean; label=Show not in stock items: If set the items will be shown even if no product is in the stock.
  showNotinStock =
    # cat=plugin.products//; type=text; label=Not in Stock message: Message is displayed if inStock = 0 (means not inStock)
  notInStockMessage = not in stock
    # cat=plugin.products//; type=string; label=Unit for pieces
  inStockPieces = pieces

    # cat=plugin.products//; type=int+; label=New Item Days: How many days list new items in LISTNEWITEMS
  newItemDays = 7

    # cat=plugin.products//; type=int+; label=Substitute page title: If you set this to 1, the product title will be showed as page title in single view. If you set this to 2, the product subtitle will be displayed
  substitutePagetitle = 1
  
    # cat=plugin.products//; type=string; label=gift selection: SQL where clause to form the gift products from the tt_products table
  whereGift = 

}

